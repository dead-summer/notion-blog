import{_ as d,c as r,d as o,o as e}from"./app-B6dbd404.js";const l={};function a(i,t){return e(),r("div",null,t[0]||(t[0]=[o("<p>Java 中有 7 个位运算：<code>&amp;</code> <code>|</code> <code>^</code> <code>~</code> <code>&gt;&gt;</code> <code>&lt;&lt;</code> <code>&gt;&gt;&gt;</code> 。</p><ol><li><p><strong>按位与 (<strong><strong><code>&amp;</code></strong></strong>)：</strong></p><ul><li><p>运算规则：只有两个操作数的对应位都为 1，结果才为 1，否则为 0。</p></li><li><p>示例：<code>5 &amp; 3 = 1</code> 。考虑 <code>int</code> 型变量，过程如下：</p><table><thead><tr><th>十进制</th><th>32 位二进制</th></tr></thead><tbody><tr><td>5</td><td>00000000 00000000 00000000 00000101</td></tr><tr><td>3</td><td>00000000 00000000 00000000 00000011</td></tr><tr><td>5 &amp; 3 = 1</td><td>00000000 00000000 00000000 00000001</td></tr></tbody></table></li></ul></li><li><p><strong>按位或 (<strong><strong><code>|</code></strong></strong>)：</strong></p><ul><li><p>运算规则：只要两个操作数的对应位有一个为 1，结果就为 1。</p></li><li><p>示例：<code>5 | 3 = 7</code> 。考虑 <code>int</code> 型变量，过程如下：</p><table><thead><tr><th>十进制</th><th>32 位二进制</th></tr></thead><tbody><tr><td>5</td><td>00000000 00000000 00000000 00000101</td></tr><tr><td>3</td><td>00000000 00000000 00000000 00000011</td></tr><tr><td>5</td><td>3 = 7</td></tr></tbody></table></li></ul></li><li><p><strong>按位异或 (<strong><strong><code>^</code></strong></strong>)：</strong></p><ul><li><p>运算规则：两个操作数的对应位不同时，结果为 1；相同则为 0。</p></li><li><p>示例：<code>5 ^ 3 = 6</code> 。考虑 <code>int</code> 型变量，过程如下：</p><table><thead><tr><th>十进制</th><th>32 位二进制</th></tr></thead><tbody><tr><td>5</td><td>00000000 00000000 00000000 00000101</td></tr><tr><td>3</td><td>00000000 00000000 00000000 00000011</td></tr><tr><td>5 ^ 3 = 6</td><td>00000000 00000000 00000000 00000110</td></tr></tbody></table></li></ul></li><li><p><strong>按位非 (<strong><strong><code>~</code></strong></strong>)：</strong></p><ul><li><p>运算规则：将操作数的每一位取反，即 1 变 0，0 变 1。</p></li><li><p>示例：<code>~ 5 = -6</code> 。考虑 <code>int</code> 型变量，过程如下：</p><table><thead><tr><th>十进制</th><th>32 位二进制</th></tr></thead><tbody><tr><td>5</td><td>00000000 00000000 00000000 00000101</td></tr><tr><td>~5</td><td>11111111 11111111 11111111 11111010</td></tr></tbody></table><p>由于计算机对于整数实际上是使用 2 的补码 (Two&#39;s Complement) 来运算。因此为得到 <code>~5</code> 的十进制数，我们需要计算其原码：</p><ol><li>补码减一得到反码；</li><li>将反码转为原码（除符号位按位取反）。</li></ol><table><thead><tr><th>编码</th><th>值</th></tr></thead><tbody><tr><td>补码</td><td>11111111 11111111 11111111 11111010</td></tr><tr><td>反码</td><td>11111111 11111111 11111111 11111001</td></tr><tr><td>原码</td><td>10000000 00000000 00000000 00000110</td></tr><tr><td>十进制</td><td>-6</td></tr></tbody></table></li></ul></li><li><p><strong>有符号右移 (<strong><strong><code>&gt;&gt;</code></strong></strong>)：</strong></p><ul><li>运算规则：将操作数的二进制位向右移动指定的位数，左边空出的位用符号位填充。</li><li>示例： <ul><li><p><code>5 &gt;&gt; 1 = 2</code> 。</p><table><thead><tr><th>十进制</th><th>32 位二进制</th></tr></thead><tbody><tr><td>5</td><td>00000000 00000000 00000000 00000101</td></tr><tr><td>5 &gt;&gt; 1</td><td>00000000 00000000 00000000 00000010</td></tr></tbody></table></li><li><p><code>-5 &gt;&gt; 1 = -3</code> 。</p><table><thead><tr><th>十进制</th><th>32 位二进制</th><th>编码</th></tr></thead><tbody><tr><td>-5</td><td>10000000 00000000 00000000 00000101</td><td>原码</td></tr><tr><td>-5</td><td>11111111 11111111 11111111 11111010</td><td>反码</td></tr><tr><td>-5</td><td>11111111 11111111 11111111 11111011</td><td>补码</td></tr><tr><td>-5 &gt;&gt; 1</td><td>111111111 11111111 11111111 1111101</td><td>补码</td></tr><tr><td>-5 &gt;&gt; 1</td><td>111111111 11111111 11111111 1111100</td><td>反码</td></tr><tr><td>-3</td><td>10000000 00000000 00000000 00000011</td><td>原码</td></tr></tbody></table></li></ul></li></ul></li><li><p><strong>左移 (<strong><strong><code>&lt;&lt;</code></strong></strong>)：</strong></p><ul><li><p>运算规则：将操作数的二进制位向左移动指定的位数，右边空出的位用 0 填充。</p></li><li><p>示例：<code>5 &lt;&lt; 1 = 10</code> 。</p><table><thead><tr><th>十进制</th><th>32 位二进制</th></tr></thead><tbody><tr><td>5</td><td>00000000 00000000 00000000 00000101</td></tr><tr><td>5 &lt;&lt; 1</td><td>00000000 00000000 00000000 00001010</td></tr></tbody></table></li></ul></li><li><p><strong>无符号右移 (<strong><strong><code>&gt;&gt;&gt;</code></strong></strong>)：</strong></p><ul><li>运算规则：类似于有符号右移，但无论正负，左边空出的位都用 0 填充。</li><li>示例： <ul><li><p><code>5 &gt;&gt;&gt; 1 = 2</code> 。</p><table><thead><tr><th>十进制</th><th>32 位二进制</th></tr></thead><tbody><tr><td>5</td><td>00000000 00000000 00000000 00000101</td></tr><tr><td>5 &gt;&gt;&gt; 1</td><td>00000000 00000000 00000000 00000010</td></tr></tbody></table></li><li><p><code>-5 &gt;&gt;&gt; 1 = 2147483645</code> 。</p><table><thead><tr><th>十进制</th><th>32 位二进制</th><th>编码</th></tr></thead><tbody><tr><td>-5</td><td>10000000 00000000 00000000 00000101</td><td>原码</td></tr><tr><td>-5</td><td>11111111 11111111 11111111 11111010</td><td>反码</td></tr><tr><td>-5</td><td>11111111 11111111 11111111 11111011</td><td>补码</td></tr><tr><td>-5 &gt;&gt;&gt; 1</td><td>011111111 11111111 11111111 1111101</td><td>补码</td></tr><tr><td>2147483645</td><td>011111111 11111111 11111111 1111101</td><td>原码</td></tr></tbody></table></li></ul></li></ul></li></ol><blockquote><p>⚠️ 特别说明：没有 <code>&lt;&lt;&lt;</code> 符号。</p></blockquote>",3)]))}const g=d(l,[["render",a],["__file","index.html.vue"]]),s=JSON.parse('{"path":"/hsp-java/4-28-bitwise-operators/","title":"28 位运算符","lang":"zh-CN","frontmatter":{"title":"28 位运算符","createTime":"2024/12/01 21:32:00","permalink":"/hsp-java/4-28-bitwise-operators/"},"headers":[],"readingTime":{"minutes":2.27,"words":682},"git":{"updatedTime":1740991950000,"contributors":[{"name":"dead_summer","username":"dead_summer","email":"2941325451@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/dead_summer?v=4","url":"https://github.com/dead_summer"}]},"filePathRelative":"notes/韩顺平 Java 教程/第 4 章 运算符/4.28 位运算符.md"}');export{g as comp,s as data};
