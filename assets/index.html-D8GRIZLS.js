import{_ as a,c as i,d as p,o as n}from"./app-B6dbd404.js";const e="/notion-blog/assets/41773cf1aca980d25cf2183916adc5bf-BhrpiuAx.png",l="/notion-blog/assets/876561143f6dabc2c6bdeebaf404b16c-D2p3hgyl.png",t="/notion-blog/assets/b84c9f81b1b30a9db2105e3828a4a348-CsGT6hzn.png",c="/notion-blog/assets/0dadeb47950f0934085b4eac66a33286-C64Z29E8.png",h="/notion-blog/assets/988c2b98d7184383a9daba000b96f823-7juTMPqb.png",k={};function r(d,s){return n(),i("div",null,s[0]||(s[0]=[p(`<h2 id="aop-概述" tabindex="-1"><a class="header-anchor" href="#aop-概述"><span><strong><strong>AOP 概述</strong></strong></span></a></h2><p>AOP（Aspect Oriented Programming，面向切面编程）是一种编程思想，它允许开发者在不修改源代码的情况下，为现有的方法添加额外的功能。</p><p><strong>AOP 的作用：</strong> 在程序运行期间在不修改源代码的基础上对已有方法进行增强。</p><p><strong>AOP 的优势：</strong></p><ol><li>减少重复代码</li><li>提高开发效率</li><li>维护方便</li></ol><h2 id="aop-快速入门" tabindex="-1"><a class="header-anchor" href="#aop-快速入门"><span><strong><strong>AOP 快速入门</strong></strong></span></a></h2><p><strong>需求：</strong> 统计各个业务层方法执行耗时。</p><p><strong>步骤：</strong></p><ol><li><p><strong>导入依赖：</strong> 在 <code>pom.xml</code> 中导入 AOP 的依赖。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">org.springframework.boot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spring-boot-starter-aop</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>编写 AOP 程序：</strong> 创建一个切面类，使用 <code>@Aspect</code> 注解进行标识。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Component</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Aspect</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">当前类为切面类</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Slf4j</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span class="space"> </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">TimeAspect</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Around</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">execution(*</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">com.itheima.service.*.*(..))</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Object</span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">recordTime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ProceedingJoinPoint</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">pjp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">throws</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Throwable</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">记录方法执行开始时间</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">long</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">begin</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">currentTimeMillis</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">执行原始方法</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Object</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">result</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">pjp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">proceed</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">记录方法执行结束时间</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">long</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">end</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">currentTimeMillis</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">计算方法执行耗时</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">pjp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getSignature</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">执行耗时:</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">{}毫秒</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">end</span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">begin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">return</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>代码解释：</strong></p><ul><li><code>@Component</code> ：是将 <code>TimeAspect</code> 类标记为一个 Spring 组件，并自动将其实例化，纳入 Spring 容器的管理。</li><li><code>@Aspect</code>：将该类标记为一个切面。</li><li><code>@Around(&quot;execution(* com.itheima.service.*.*(..))&quot;)</code>：定义一个环绕通知，<code>execution(* com.itheima.service.*.*(..))</code> 是切入点表达式，表示 <code>com.itheima.service</code> 包下的所有类的所有方法。</li><li><code>ProceedingJoinPoint</code>：连接点对象，用于执行原始方法。</li><li><code>pjp.proceed()</code>：执行原始方法。</li><li><code>pjp.getSignature()</code>：获取方法签名。</li></ul><h2 id="aop-核心概念" tabindex="-1"><a class="header-anchor" href="#aop-核心概念"><span><strong><strong>AOP 核心概念</strong></strong></span></a></h2><ol><li><p><strong>连接点 (JoinPoint)</strong>：指可以被 AOP 控制的方法，其中隐含了方法执行时的相关信息。</p><p>连接点指的是可以被 AOP 控制的方法。例如：入门程序当中所有的业务方法都是可以被 AOP 控制的方法。</p><p><img src="`+e+'" alt="image.png"></p></li><li><p><strong>通知 (Advice)</strong>：指的是那些重复的逻辑，也就是共性功能，最终体现为一个方法。</p><p>在入门程序中，我们需要统计各个业务方法的执行耗时。此时，我们需要在这些业务方法运行开始之前，先记录该方法运行的开始时间；在每一个业务方法运行结束的时候，再来记录该方法运行的结束时间。</p><p>然而，在 AOP 当中，我们只需要将这部分重复的代码逻辑抽取出来单独定义。抽取出来的这一部分重复的逻辑，即为通知。</p><p><img src="'+l+'" alt="image.png"></p></li><li><p><strong>切入点 (PointCut)</strong>：用于匹配连接点的条件，通知仅会在切入点方法执行时被应用。</p><p>在通知当中，我们所定义的共性功能到底要应用在哪些方法上呢？此时就涉及到了切入点 PointCut 概念。切入点指的是匹配连接点的条件。通知仅会在切入点方法运行时才会被应用。</p><p>在 AOP 的开发当中，我们通常会通过一个切入点表达式来描述切入点。</p><p><img src="'+t+'" alt="image.png"></p><p>例如，若将切入点表达式改为 <code>DeptServiceImpl.list()</code> ，此时就代表仅有 <code>list</code> 这一方法是切入点。只有 <code>list</code> 方法在运行的时候才会应用通知。</p></li><li><p><strong>切面 (Aspect)</strong>：描述了通知与切入点的对应关系（通知 + 切入点）。</p><p>当通知和切入点结合在一起，就形成了一个切面。通过切面就能够描述当前 AOP 程序需要针对于哪个原始方法，在什么时候执行什么样的操作。</p><p><img src="'+c+'" alt="image.png"></p><p>切面所在的类，我们一般称为切面类（被 <code>@Aspect</code> 注解标识的类）。</p></li><li><p><strong>目标对象 (Target)</strong>：指通知所应用的对象。</p><p>目标对象指的就是通知所应用的对象，我们就称之为目标对象。</p><p><img src="'+h+'" alt="image.png"></p></li></ol>',13)]))}const o=a(k,[["render",r],["__file","index.html.vue"]]),A=JSON.parse('{"path":"/itheima-javaweb/day13-2-aop-basics/","title":"Day13-2 AOP 基础","lang":"zh-CN","frontmatter":{"title":"Day13-2 AOP 基础","createTime":"2025/03/01T12:58:00.000Z","updateTime":"2025/03/02T02:52:00.000Z","permalink":"/itheima-javaweb/day13-2-aop-basics/"},"headers":[],"readingTime":{"minutes":3.2,"words":960},"git":{"updatedTime":1740991950000,"contributors":[{"name":"dead_summer","username":"dead_summer","email":"2941325451@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/dead_summer?v=4","url":"https://github.com/dead_summer"}]},"filePathRelative":"notes/黑马程序员 JavaWeb/13. Day13 SpringBoot Web AOP/Day13-2 AOP 基础.md"}');export{o as comp,A as data};
