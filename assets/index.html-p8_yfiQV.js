import{_ as a,c as n,d as e,o as i}from"./app-B6dbd404.js";const p="/notion-blog/assets/53d9667709b527795d2dc18e2e637c2f-CqKHOzK1.png",l="/notion-blog/assets/7887bb6c686176af41dac1975f3b8b07-DJoi0Zui.png",c="/notion-blog/assets/9761655cf715a124deaed51635ee8629-D6H2MTB1.png",t="/notion-blog/assets/71c52c615bab9a28d67cdb501a590a31-DOWxKoFv.png",o="/notion-blog/assets/6ab2c0d27977745435a5ef8d5d48b718-BqybdFOA.png",d="/notion-blog/assets/9351a6db7a280c511ce032334722c00d-DCZVs0jK.png",r={};function h(k,s){return i(),n("div",null,s[0]||(s[0]=[e('<h2 id="当前问题" tabindex="-1"><a class="header-anchor" href="#当前问题"><span><strong><strong>当前问题</strong></strong></span></a></h2><p>在软件开发中，异常处理是至关重要的。如果没有进行适当的异常处理，系统在出现错误时可能会表现出各种不符合预期的行为。为了更好地理解异常处理的重要性，我们首先来考察一下，如果系统中出现异常，但我们没有做任何处理，会发生什么。</p><p>例如，当我们在一个系统中尝试添加一个已经存在的部门（如 &quot;就业部&quot;）时，由于数据库中 <code>dept</code> 表的 <code>name</code> 字段设置了唯一约束，因此会触发一个异常。</p><p>此时，观察浏览器的网络请求，可以看到状态码为 500，这表示服务器端发生了异常。</p><p><img src="'+p+'" alt="image.png"></p><p>在 IDEA 中查看服务器端的错误信息，会发现是由于违反了 <code>dept</code> 表中 <code>name</code> 字段的唯一约束导致的。</p><p><img src="'+l+'" alt="image.png"></p><p>再查看服务端给前端响应回来的数据，发现响应的数据是一个 JSON 格式的数据，但是不符合开发规范当中所提到的统一响应结果 <code>Result</code>。</p><p><img src="'+c+'" alt="image.png"></p><p>当前案例项目中，当 <code>Mapper</code> 接口在操作数据库时出错，异常会向上抛给 <code>Service</code> 层。<code>Service</code> 层的异常会继续抛给 <code>Controller</code> 层。由于 <code>Controller</code> 层没有做任何异常处理，异常最终会抛给框架。框架会返回一个包含错误信息的 JSON 格式数据，但是这种格式不符合开发规范，导致前端无法正确解析和显示错误信息。</p><p><img src="'+t+'" alt="image.png"></p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span><strong><strong>解决方案</strong></strong></span></a></h2><p>针对上述问题，主要有两种解决方案：</p><ul><li><p><strong>方案一：在所有 Controller 的所有方法中进行</strong> <strong><code>try...catch</code></strong> <strong>处理</strong></p><ul><li>缺点：代码臃肿，维护困难，不推荐使用。</li></ul></li><li><p><strong>方案二：全局异常处理器</strong></p><ul><li>优点：简单、优雅，易于维护，推荐使用。</li></ul><p><img src="'+o+`" alt="image.png"></p></li></ul><h2 id="全局异常处理器" tabindex="-1"><a class="header-anchor" href="#全局异常处理器"><span><strong><strong>全局异常处理器</strong></strong></span></a></h2><p>全局异常处理器是一种集中处理应用程序中所有异常的机制，它可以有效地减少代码冗余，提高代码的可维护性。</p><p>定义全局异常处理器非常简单，只需创建一个类，并添加 <code>@RestControllerAdvice</code> 注解。这个注解表示该类是一个全局异常处理器。</p><p>在全局异常处理器中，需要定义一个或多个方法来捕获特定类型的异常。这些方法需要使用 <code>@ExceptionHandler</code> 注解进行标记，并通过其 <code>value</code> 属性指定要捕获的异常类型。</p><p>下面是一个全局异常处理器的示例代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">RestControllerAdvice</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span class="space"> </span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">GlobalExceptionHandler</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//处理异常</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">ExceptionHandler</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Exception</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//指定能够处理的异常类型</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Result</span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Exception</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">printStackTrace</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//打印堆栈中的异常信息</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//捕获到异常之后，响应一个标准的Result</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">return</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">对不起,操作失败,请联系管理员</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>代码解释：</strong></p><ul><li><code>@RestControllerAdvice</code>: 该注解组合了 <code>@ControllerAdvice</code> 和 <code>@ResponseBody</code>，表示该类用于处理所有 Controller 抛出的异常，并将处理结果转换为 JSON 格式返回。</li><li><code>@ExceptionHandler(Exception.class)</code>: 该注解用于指定处理特定类型的异常的方法。在这个例子中，<code>Exception.class</code> 表示该方法用于处理所有类型的 <code>Exception</code> 异常。</li><li><code>e.printStackTrace()</code>: 该方法用于将异常的堆栈信息打印到控制台，方便调试。</li><li><code>Result.error(&quot;对不起,操作失败,请联系管理员&quot;)</code>: 返回一个标准的 <code>Result</code> 对象，其中包含错误信息。</li></ul><p>在上面的代码中，<code>@ExceptionHandler(Exception.class)</code> 注解指定了 <code>ex</code> 方法用于处理所有类型的 <code>Exception</code> 异常。当系统中发生任何 <code>Exception</code> 异常时，该方法都会被调用。在方法内部，首先使用 <code>e.printStackTrace()</code> 打印异常的堆栈信息，然后创建一个包含错误信息的 <code>Result</code> 对象，并将其返回给客户端。</p><p>现在，重新启动 SpringBoot 服务，再次尝试添加一个已存在的部门（如 &quot;就业部&quot;）。</p><p><img src="`+d+'" alt="image.png"></p><p>可以看到，异常被全局异常处理器捕获，并返回了符合规范的错误信息，前端程序能够正常解析并显示该错误提示信息。</p><p><strong>总结：</strong></p><p>全局异常处理器的使用主要涉及以下两个注解：</p><ul><li><code>@RestControllerAdvice</code>: 表示当前类为全局异常处理器。</li><li><code>@ExceptionHandler</code>: 指定可以捕获哪种类型的异常进行处理。</li></ul><p>使用全局异常处理器可以有效地提高代码的可维护性，并提供一致的错误处理机制。</p>',30)]))}const m=a(r,[["render",h],["__file","index.html.vue"]]),u=JSON.parse('{"path":"/itheima-javaweb/day12-3-exception-handling/","title":"Day12-3 异常处理","lang":"zh-CN","frontmatter":{"title":"Day12-3 异常处理","createTime":"2025/03/01T12:58:00.000Z","updateTime":"2025/03/02T02:51:00.000Z","permalink":"/itheima-javaweb/day12-3-exception-handling/"},"headers":[],"readingTime":{"minutes":3.86,"words":1159},"git":{"updatedTime":1740991950000,"contributors":[{"name":"dead_summer","username":"dead_summer","email":"2941325451@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/dead_summer?v=4","url":"https://github.com/dead_summer"}]},"filePathRelative":"notes/黑马程序员 JavaWeb/12. Day12 SpringBoot Web 登录认证/Day12-3 异常处理.md"}');export{m as comp,u as data};
