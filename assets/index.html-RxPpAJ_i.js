import{_ as d,c as t,d as o,o as c}from"./app-B6dbd404.js";const a={};function l(r,e){return c(),t("div",null,e[0]||(e[0]=[o("<p>用于连接多个条件（多个关系表达式），最终的结果也是一个 <code>boolean</code> 值。</p><p>逻辑运算规则说明：</p><ol><li><code>a&amp;b</code> : <code>&amp;</code> 为逻辑与。规则：当 <code>a</code> 和 <code>b</code> 同时为 <code>true</code> ，则结果为 <code>true</code> ，否则为 <code>false</code> 。</li><li><code>a&amp;&amp;b</code> : <code>&amp;&amp;</code> 为短路与。规则：当 <code>a</code> 和 <code>b</code> 同时为 <code>true</code> ，则结果为 <code>true</code> ，否则为 <code>false</code> 。</li><li><code>a|b</code> : <code>|</code> 为逻辑或。规则：当 <code>a</code> 和 <code>b</code> ，有一个为 <code>true</code> ,则结果为 <code>true</code> ，则为 <code>false</code> 。</li><li><code>a||b</code> : <code>||</code> 为短路或。规则：当 <code>a</code> 和 <code>b</code> ，有一个为 <code>true</code> ，则结果为 <code>true</code> ，否则为 <code>false</code>。</li><li><code>!a</code> : 为取反，也称作非运算。当 <code>a</code> 为 <code>true</code>, 则结果为 <code>false</code> ， 当 <code>a</code> 为 <code>false</code> 时，结果为 <code>true</code> 。</li><li><code>a^b</code>: 为逻辑异或，当 <code>a</code> 和 <code>b</code> 不同时，则结果为 <code>true</code> ，否则为 <code>false</code> 。</li></ol><p>逻辑运算符一览：</p><table><thead><tr><th><code>a</code></th><th><code>b</code></th><th><code>a&amp;b</code></th><th><code>a&amp;&amp;b</code></th><th><code>a|b</code></th><th><code>a||b</code></th><th><code>!a</code></th><th><code>a^b</code></th></tr></thead><tbody><tr><td>true</td><td>true</td><td>true</td><td>false</td><td>true</td><td>true</td><td>false</td><td>false</td></tr><tr><td>true</td><td>false</td><td>false</td><td>true</td><td>true</td><td>true</td><td>false</td><td>true</td></tr><tr><td>false</td><td>true</td><td>false</td><td>false</td><td>true</td><td>true</td><td>true</td><td>true</td></tr><tr><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>true</td><td>true</td><td>false</td></tr></tbody></table><p>其中，</p><p><code>&amp;&amp;</code> 和 <code>&amp;</code> 使用区别：</p><ol><li><code>&amp;&amp;</code> 短路与：如果第一个条件为 <code>false</code>，则第二个条件不会判断，最终结果为 <code>false</code>，效率高。</li><li><code>&amp;</code> 逻辑与：不管第一个条件是否为 <code>false</code>，第二个条件都要判断，效率低。</li><li>开发中， 我们使用的基本是使用短路与 <code>&amp;&amp;</code> ，效率高</li></ol><p><code>||</code> 和 <code>|</code> 使用区别</p><ol><li><code>||</code> 短路或：如果第一个条件为 <code>true</code>，则第二个条件不会判断，最终结果为 <code>true</code>，效率高</li><li><code>|</code> 逻辑或：不管第一个条件是否为 <code>true</code>，第二个条件都要判断，效率低</li><li>开发中，我们基本使用 <code>||</code> 。</li></ol>",10)]))}const i=d(a,[["render",l],["__file","index.html.vue"]]),m=JSON.parse('{"path":"/hsp-java/4-4-logical-operators/","title":"4 逻辑运算符","lang":"zh-CN","frontmatter":{"title":"4 逻辑运算符","createTime":"2024/11/29 20:18:00","permalink":"/hsp-java/4-4-logical-operators/"},"headers":[],"readingTime":{"minutes":1.41,"words":422},"git":{"updatedTime":1740991950000,"contributors":[{"name":"dead_summer","username":"dead_summer","email":"2941325451@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/dead_summer?v=4","url":"https://github.com/dead_summer"}]},"filePathRelative":"notes/韩顺平 Java 教程/第 4 章 运算符/4.04 逻辑运算符.md"}');export{i as comp,m as data};
