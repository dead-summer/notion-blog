import{_ as e,c as n,d as a,a as p,r as l,o as c}from"./app-B6dbd404.js";const t={};function d(h,s){const i=l("Mermaid");return c(),n("div",null,[s[0]||(s[0]=a(`<p>基本语法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">switch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">expression</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">case</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">x</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">code</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">block</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">break</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">case</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">y</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">code</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">block</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">break</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">default:</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">code</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">block</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>工作方式：</p><ol><li><code>switch</code> 表达式只被评估一次。</li><li><code>expression</code> 的值与每个 <code>case</code> 的值进行比较。</li><li>如果匹配，执行相关联的代码块。</li><li>如果没有一个匹配，执行 <code>default</code> 。</li><li><code>break</code> 和 <code>default</code> 关键字是可选的。</li></ol>`,4)),p(i,{id:"mermaid-34",code:"eJxLL0osyFAIceFSAALH6Kd7Gp4u745V0NW1U3CKfrFu4fN10xWKyzNLkjMUXixc8WLfvqd7+mPBip3Aipyr0WWfNuypBStwBimoSU4sTlUwrFFwMYx+1rn8xcIeBYiIwpPdi58vaHw6dzrEOCTVRkDVRiiqjfCoNgaqNkZRbYxddUpqWmJpTkmNgitMNVQEXbmLIdhrbtEvtm9+2r4L7v/1a5/2L4UqMYIogXCMkTiuSGw3MNs9+vnu5c93r4VaimLa0wl9z2e1QOyHmOwO1uMB1DP52dz5sVwADLuo9Q=="}),s[1]||(s[1]=a(`<p><code>switch</code> 注意事项和细节讨论：</p><ol><li><p>表达式数据类型，应和 <code>case</code> 后的常量类型一致，或者是可以自动转成可以相互比较的类型，比如 <code>expression</code> 是字符，而 <code>case</code> 后是 <code>int</code> 。</p></li><li><p><code>switch(expression)</code> 中 <code>expression</code> 的返回值必须是：<code>byte</code> , <code>short</code> , <code>int</code> , <code>char</code> , <code>enum</code> , <code>String</code> 。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">double</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">c</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1.1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">switch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">error</span></span>
<span class="line"><span class="tab">	</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">case</span><span class="space"> </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1.1</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">error</span></span>
<span class="line"><span class="tab">	</span><span class="tab">	</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ok</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span class="tab">	</span><span class="tab">	</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">break</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>case</code>子句中的值必须是常量，而不能是变量</p></li><li><p><code>default</code> 子句是可选的，当没有匹配的<code>case</code>时，执行<code>default</code></p></li><li><p><code>break</code> 语句用来在执行完一个 <code>case</code> 分支后使程序跳出 <code>switch</code> 语句块；如果没有写 <code>break</code> ，程序会顺序执行到 <code>switch</code> 结尾，除非遇到<code>break</code> 。</p></li></ol>`,2))])}const r=e(t,[["render",d],["__file","index.html.vue"]]),o=JSON.parse('{"path":"/hsp-java/5-6-switch-branch-structure/","title":"6 switch 分支结构","lang":"zh-CN","frontmatter":{"title":"6 switch 分支结构","createTime":"2024/12/02 17:06:00","permalink":"/hsp-java/5-6-switch-branch-structure/"},"headers":[],"readingTime":{"minutes":1.25,"words":375},"git":{"updatedTime":1740991950000,"contributors":[{"name":"dead_summer","username":"dead_summer","email":"2941325451@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/dead_summer?v=4","url":"https://github.com/dead_summer"}]},"filePathRelative":"notes/韩顺平 Java 教程/第 5 章 程序控制结构/5.06 switch 分支结构.md"}');export{r as comp,o as data};
