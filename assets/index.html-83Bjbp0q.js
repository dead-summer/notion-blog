import{_ as i,c as a,d as e,o as n}from"./app-B6dbd404.js";const p="/notion-blog/assets/0327d3eeae2d75cdcdaf104b02d4b42d-DJu-Qfcc.png",t="/notion-blog/assets/f3612ba8f5108e1d5269d9eb251b27db-C0tE2UBD.png",l="/notion-blog/assets/a8dbdc9cfd786f869ef52177ff985242-x_kujXLu.png",d="/notion-blog/assets/c3ad1f354712929221aaa5d84da7db5f-jXFW3s_x.png",o="/notion-blog/assets/2bf150c459ed7aa0910a139782983996-CO-pDS7g.png",r="/notion-blog/assets/148f8982bf010a9e350ff4376b52c23f-D_u41lYh.png",c="/notion-blog/assets/5e98278115d38fa748564dc5547fdf24--hplKkF-.png",g="/notion-blog/assets/2dfd1ad80867eac9ec012e5819c6b188-BsCHAzJA.png",h="/notion-blog/assets/353942e0c20419a9418dcdabfff12927-DJuZ3xjl.png",k="/notion-blog/assets/f8fa282943f520400776b0c453499fff-C6paCSLA.png",m="/notion-blog/assets/3382f88eb082d994535d059d74df44de-3zTV2m3n.png",u="/notion-blog/assets/c01b52cf6713008078f0ba809465e778-DN0R8dCI.png",b="/notion-blog/assets/9a7845f51fd94138b84ca937c6a2616c-AdmjWZ5R.png",v="/notion-blog/assets/e07ab65a5b8d137362f0e96eda283e04-C88MrmhS.png",f="/notion-blog/assets/87d4f1fb23b271dd67d8dd7c82ba01cf-BqhdTirY.png",y="/notion-blog/assets/dab021f1dfd133ac020add1a762f0b5d-CDbYXsN_.png",_="/notion-blog/assets/c8d6ca962ddf0189cc2c3efa99541b47-SxquYApA.png",A="/notion-blog/assets/0529aec8419724c0d9e63fd64830d4ee-BpZC32B6.png",D="/notion-blog/assets/f49b4e9ab866264b260d6091ee6ac313-C6Y3T_Yw.png",B="/notion-blog/assets/7ee0bde3d9e5b18c65d6e0c25009a385-CCkrsPB_.png",C="/notion-blog/assets/f7811bae1f46adbbcd578bb2bcbb5fe1-eeh-Rqti.png",x="/notion-blog/assets/01535d2f0a251c578cf6303c0de2fcb6-B77zO4Gc.png",V="/notion-blog/assets/157b17a3dbbe875528107fff899f37db-BI1oTQAy.png",j="/notion-blog/assets/3b1bb4857b5b3e6369b8fac42ab2f76d-1tmLGZIb.png",S="/notion-blog/assets/0ed352b24bf5efc869f9a6744206ce7e-_jk9EOai.png",E={};function T(N,s){return n(),a("div",null,s[0]||(s[0]=[e('<h2 id="前端工程化介绍" tabindex="-1"><a class="header-anchor" href="#前端工程化介绍"><span><strong><strong>前端工程化介绍</strong></strong></span></a></h2><p>目前的前端开发模式，比如直接在工程中导入 vue.js 和 axios.js 文件，存在以下问题：</p><ul><li>每次开发都是从零开始，比较麻烦。</li><li>多个页面中的组件共用性不好。</li><li>js、图片等资源没有规范化的存储目录，没有统一的标准，不方便维护。</li></ul><p>因此，企业开发更倾向于前端工程化的方式，其主要特点包括：</p><ul><li><strong>模块化</strong>：将 js 和 css 等做成可复用的模块。</li><li><strong>组件化</strong>：将 UI 组件、css 样式、js 行为封装成一个个组件，便于管理。</li><li><strong>规范化</strong>：提供一套标准的目录接口和编码规范，所有开发人员遵循。</li><li><strong>自动化</strong>：项目的构建、测试、部署全部自动完成。</li></ul><p>前端工程化本质上是在企业级前端项目开发中，将前端开发所需的工具、技术、流程、经验进行规范化和标准化，从而提升开发效率，降低开发难度。接下来我们将学习 Vue 官方提供的脚手架来完成前端工程化。</p><h2 id="前端工程化入门" tabindex="-1"><a class="header-anchor" href="#前端工程化入门"><span><strong><strong>前端工程化入门</strong></strong></span></a></h2><h3 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备"><span><strong><strong>环境准备</strong></strong></span></a></h3><p>前端工程化依赖于 Vue 官方提供的脚手架 Vue-cli，它可以快速生成 Vue 项目模板，并提供以下功能：</p><ul><li>统一的目录结构</li><li>本地调试</li><li>热部署</li><li>单元测试</li><li>集成打包上线</li></ul><p>Vue-cli 的运行需要依赖 NodeJS 环境。因此，需要先 <a href="/1949f1fc15a38048b897dcba40209108" target="_blank" rel="noopener noreferrer">安装 NodeJS</a>，然后才能 <a href="/1949f1fc15a38048b897dcba40209108#1949f1fc15a3800695d4ead2281aea8d" target="_blank" rel="noopener noreferrer">安装 Vue-cli</a>。</p><h3 id="vue项目简介" tabindex="-1"><a class="header-anchor" href="#vue项目简介"><span><strong><strong><strong>Vue项目简介</strong></strong></strong></span></a></h3><p>环境准备好了，接下来我们需要通过 Vue-cli 创建一个 vue 项目，然后再学习一下 vue 项目的目录结构。Vue-cli 提供了如下 2 种方式创建 vue 项目:</p><ul><li><p>命令行：直接通过命令行方式创建vue项目</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">vue</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">create</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">vue-project01</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>图形化界面：通过命令先进入到图形化界面，然后再进行vue工程的创建</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">vue</span><span class="space"> </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ui</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>图形化界面如下：</p><p><img src="'+p+'" alt="image.png"></p></li></ul><h4 id="创建-vue-项目" tabindex="-1"><a class="header-anchor" href="#创建-vue-项目"><span><strong><strong><strong>创建 vue 项目</strong></strong></strong></span></a></h4><p>此处我们通过第二种图形化界面方式给大家演示。</p><p>首先，我们再桌面创建 vue 文件夹，然后双击进入文件夹，来到地址目录，输入 cmd，然后进入到 vue 文件夹的 cmd 窗口界面，如下图所示：</p><p><img src="'+t+'" alt="image.png"></p><p>然后进入如下界面：</p><p><img src="'+l+'" alt="image.png"></p><p>然后再当前目录下，直接输入命令<code>vue ui</code>进入到vue的图形化界面，如下图所示：</p><p><img src="'+d+'" alt="image.png"></p><p>然后我们选择创建按钮，在vue文件夹下创建项目，如下图所示：</p><p><img src="'+o+'" alt="image.png"></p><p>然后来到如下界面，进行vue项目的创建</p><p><img src="'+r+'" alt="image.png"></p><p>然后预设模板选择手动，如下图所示：</p><p><img src="'+c+'" alt="image.png"></p><p>然后再功能页面开启路由功能，如下图所示：</p><p><img src="'+g+'" alt="image.png"></p><p>然后再配置页面选择语言版本和语法检查规范，如下图所示：</p><p><img src="'+h+'" alt="image.png"></p><p>然后创建项目，进入如下界面：</p><p><img src="'+k+'" alt="image.png"></p><p>最后我们只需要等待片刻，即可进入到创建创建成功的界面，如下图所示：</p><p><img src="'+m+'" alt="image.png"></p><p>到此，vue项目创建结束</p><h4 id="vue项目目录结构介绍" tabindex="-1"><a class="header-anchor" href="#vue项目目录结构介绍"><span><strong><strong><strong>vue项目目录结构介绍</strong></strong></strong></span></a></h4><p>我们通过VS Code打开之前创建的vue文件夹，打开之后，呈现如下图所示页面：</p><p><img src="'+u+'" alt="image.png"></p><p>vue项目的标准目录结构以及目录对应的解释如下图所示:</p><p><img src="'+b+'" alt="image.png"></p><p>其中我们平时开发代码就是在<strong>src目录</strong>下。</p><h4 id="运行vue项目" tabindex="-1"><a class="header-anchor" href="#运行vue项目"><span><strong><strong><strong>运行vue项目</strong></strong></strong></span></a></h4><p>那么vue项目开发好了，我们应该怎么运行vue项目呢？主要提供了2种方式</p><ul><li><p>第一种方式：通过VS Code提供的图形化界面 ，如下图所示：（注意：NPM脚本窗口默认不显示，可以参考本节的最后调试出来）</p><p><img src="'+v+'" alt="image.png"></p><p>点击之后，我们等待片刻，即可运行，在终端界面中，我们发现项目是运行在本地服务的8080端口，我们直接通过浏览器打开地址</p><p><img src="'+f+'" alt="image.png"></p><p>最终浏览器打开后，呈现如下界面，表示项目运行成功</p><p><img src="'+y+'" alt="image.png"></p><p>其实此时访问的是 <strong>src/App.vue</strong>这个根组件，此时我们打开这个组件，修改代码：添加内容Vue</p><p><img src="'+_+'" alt="image.png"></p><p>只要我们保存更新的代码，我们直接打开浏览器，不需要做任何刷新，发现页面呈现内容发生了变化，如下图所示：</p><p><img src="'+A+`" alt="image.png"></p><p>这就是我们 vue 项目的热更新功能</p><p>对于 8080 端口，经常被占用，所以我们可以去修改默认的 8080 端口。我们修改 <code>vue.config.js</code> 文件的内容，添加如下代码：</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">devServer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> </span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> </span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> port</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">7000</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如下图所示，然后我们关闭服务器，并且重新启动，</p><p><img src="`+D+'" alt="image.png"></p><p>重新启动如下图所示：</p><p><img src="'+B+'" alt="image.png"></p><p>端口更改成功，可以通过浏览器访问7000端口来访问我们之前的项目</p></li><li><p>第二种方式：命令行方式</p><p>直接基于cmd命令窗口，在vue目录下，执行输入命令<code>npm run serve</code>即可，如下图所示：</p><p><img src="'+C+'" alt="image.png"></p></li></ul><p>补充：NPM脚本窗口调试出来</p><p>第一步：通过<strong>设置/用户设置/扩展/MPM</strong>更改NPM默认配置，如下图所示</p><p><img src="'+x+'" alt="image.png"></p><p>然后重启VS Code，并且<strong>双击打开package.json文件</strong>，然后点击<strong>资源管理器处的3个小点</strong>，<strong>勾选npm脚本选项</strong>，如图所示</p><p><img src="'+V+'" alt="image.png"></p><p>然后就能都显示NPM脚本小窗口了。</p><h3 id="vue项目开发流程" tabindex="-1"><a class="header-anchor" href="#vue项目开发流程"><span><strong><strong><strong>Vue项目开发流程</strong></strong></strong></span></a></h3><p>我们访问的首页是 <code>index.html</code>，但是打开 <code>public/index.html</code> 文件后发现，里面没有什么代码，但是能够呈现内容丰富的首页。这是因为 <code>index.html</code> 文件默认引入了入口函数 <code>main.js</code> 文件。</p><p><img src="'+j+`" alt="image.png"></p><p>**<code>src/main.js</code>**<strong>文件</strong></p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Vue</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">vue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> import</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">App</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./App.vue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> import</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">router</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span class="space"> </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./router</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Vue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">config</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">productionTip</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span class="space"> </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">false</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Vue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> </span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> router</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> </span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> render</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span class="space"> </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">h</span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=&gt;</span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">h</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">App</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$mount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">#app</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，包括如下几个关键点：</p><ul><li><code>import</code>：导入指定文件，并且重新起名。例如上述代码 <code>import App from &#39;./App.vue&#39;</code> 导入当前目录下得 <code>App.vue</code> 并且起名为 <code>App</code></li><li><code>new Vue()</code>：创建 Vue 对象</li><li><code>$mount(&#39;#app&#39;)</code>：将 Vue 对象创建的 DOM 对象挂在到 <code>id=app</code> 的这个标签区域中，作用和之前学习的 Vue 对象的 <code>el</code> 属性一致。</li><li><code>router</code>：路由，详细在后面的小节讲解</li><li><code>render</code>：主要使用视图的渲染的。</li></ul><p>在 <code>public/index.html</code> 中，删除 <code>div</code> 的 <code>id=app</code> 属性，打开浏览器，发现之前访问的首页一片空白，这样就证明了，我们 <code>main.js</code> 中通过代码挂在到 <code>index.html</code> 的 <code>id=app</code> 的标签区域的。</p><p>首页内容呈现涉及到 <code>render</code> 中的 <code>App</code>，而 <code>App</code> 对象是 <code>.vue</code> 结尾的 Vue 组件。Vue 的组件文件包含三个部分：</p><ul><li><code>template</code>：模板部分，主要是 HTML 代码，用来展示页面主体结构的。</li><li><code>script</code>：JS 代码区域，主要是通过 JS 代码来控制模板的数据来源和行为的。</li><li><code>style</code>：CSS 样式部分，主要通过 CSS 样式控制模板的页面效果的。</li></ul><p><img src="`+S+'" alt="image.png"></p>',63)]))}const J=i(E,[["render",T],["__file","index.html.vue"]]),M=JSON.parse('{"path":"/itheima-javaweb/day03-3-frontend-engineering/","title":"Day03-3 前端工程化","lang":"zh-CN","frontmatter":{"title":"Day03-3 前端工程化","createTime":"2025/03/01T12:58:00.000Z","updateTime":"2025/03/02T02:42:00.000Z","permalink":"/itheima-javaweb/day03-3-frontend-engineering/"},"headers":[],"readingTime":{"minutes":6,"words":1799},"git":{"updatedTime":1740991950000,"contributors":[{"name":"dead_summer","username":"dead_summer","email":"2941325451@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/dead_summer?v=4","url":"https://github.com/dead_summer"}]},"filePathRelative":"notes/黑马程序员 JavaWeb/3. Day03 Vue+Element/Day03-3 前端工程化.md"}');export{J as comp,M as data};
