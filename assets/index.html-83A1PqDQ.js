import{_ as r,c as s,d as t,o}from"./app-B6dbd404.js";const e="/notion-blog/assets/6e25aadb372334c7f5c133d3e45b8ec5-D6PtYBh_.png",a="/notion-blog/assets/e1e854adcd2df3009ca8d18a019fcdad-DT0H7mcE.png",g="/notion-blog/assets/7d737bd6a057f6fce8b5e35586932285-DCeJ3utG.png",i="/notion-blog/assets/868290f29acc146d7493262ebd9fa31c-D_qa1Qnj.png",p="/notion-blog/assets/51eb930f52ee5d17fe3e7574b67e8eae-qEKukSY3.png",l={};function c(m,n){return o(),s("div",null,n[0]||(n[0]=[t('<p>到目前为止，我们已经学习了基于 Spring Boot 进行 Web 后端开发的相关知识。下面对 Web 课程进行总结，回顾所学内容，并明确每个知识点所属的框架。</p><h2 id="三层架构" tabindex="-1"><a class="header-anchor" href="#三层架构"><span><strong><strong>三层架构</strong></strong></span></a></h2><p>Web 后端开发基本上都是基于标准的三层架构进行开发的。</p><p><img src="'+e+'" alt="image.png"></p><ul><li><strong>Controller（控制器层）：</strong> 负责接收请求，响应数据，不进行逻辑处理。</li><li><strong>Service（业务层）：</strong> 负责具体的业务逻辑处理。</li><li><strong>DAO（数据访问层/持久层）：</strong> 负责处理数据访问操作，完成数据库中数据的增删改查操作。</li></ul><p><strong>请求流程：</strong> 前端发起请求，首先到达 Controller，Controller 直接调用 Service 进行逻辑处理，Service 再调用 DAO 完成数据访问操作。</p><h2 id="通用业务处理" tabindex="-1"><a class="header-anchor" href="#通用业务处理"><span><strong><strong>通用业务处理</strong></strong></span></a></h2><p>在执行具体的业务处理之前，可能需要进行一些通用的业务处理，例如：统一的登录校验、统一的字符编码等。</p><p><img src="'+a+'" alt="image.png"></p><p><strong>实现方案：</strong> 借助于 Java Web 当中的三大组件之一的 <strong>过滤器 Filter</strong> 或者是 Spring 当中提供的 <strong>拦截器 Interceptor</strong> 来实现。</p><h2 id="spring-框架核心" tabindex="-1"><a class="header-anchor" href="#spring-框架核心"><span><strong><strong>Spring 框架核心</strong></strong></span></a></h2><p>为了实现三层架构层与层之间的解耦，我们学习了 Spring 框架当中的第一大核心：<strong>IOC 控制反转</strong> 与 <strong>DI 依赖注入</strong>。</p><ul><li><strong>IOC（控制反转）：</strong> 指的是将对象创建的控制权由应用程序自身交给外部容器，这个容器就是 IOC 容器或 Spring 容器。</li><li><strong>DI（依赖注入）：</strong> 指的是容器为程序提供运行时所需要的资源。</li></ul><p>除了 IOC 与 DI，我们还讲到了 <strong>AOP 面向切面编程</strong>，还有 Spring 中的 <strong>事务管理</strong>、<strong>全局异常处理器</strong>，以及传递会话技术 <strong>Cookie</strong>、<strong>Session</strong> 以及新的会话跟踪解决方案 <strong>JWT 令牌</strong>，<strong>阿里云 OSS 对象存储服务</strong>，以及通过 <strong>Mybatis 持久层架构</strong> 操作数据库等技术。</p><p><img src="'+g+'" alt="image.png"></p><h2 id="技术归属" tabindex="-1"><a class="header-anchor" href="#技术归属"><span><strong><strong>技术归属</strong></strong></span></a></h2><p>我们在学习这些 Web 后端开发技术的时候，都是基于主流的 Spring Boot 进行整合使用的。现在来区分一下这些技术分别是哪个框架提供的核心功能：</p><ul><li><strong>Java Web 技术：</strong> Filter 过滤器、Cookie、Session。</li><li><strong>企业解决方案：</strong> JWT 令牌、阿里云 OSS 对象存储服务。</li><li><strong>Spring Framework 核心功能：</strong> IOC 控制反转、DI 依赖注入、AOP 面向切面编程、事务管理、全局异常处理、拦截器。</li><li><strong>持久层框架：</strong> Mybatis (用于操作数据库)。</li></ul><p><img src="'+i+'" alt="image.png"></p><h2 id="springmvc" tabindex="-1"><a class="header-anchor" href="#springmvc"><span><strong><strong>SpringMVC</strong></strong></span></a></h2><p>Spring 框架的生态中，对 Web 程序开发提供了很好的支持，例如：全局异常处理器、拦截器。这些都是 Spring 框架中 Web 开发模块所提供的功能，而 Spring 框架的 Web 开发模块，也被称为 <strong>SpringMVC</strong>。</p><p><img src="'+p+'" alt="image.png"></p><p><strong>注意：</strong> SpringMVC 不是一个单独的框架，它是 Spring 框架的一部分，是 Spring 框架中的 Web 开发模块，是用来简化原始的 Servlet 程序开发的。</p><h2 id="ssm-框架" tabindex="-1"><a class="header-anchor" href="#ssm-框架"><span><strong><strong>SSM 框架</strong></strong></span></a></h2><p>外界俗称的 <strong>SSM</strong>，就是由：<strong>SpringMVC、Spring Framework、Mybatis</strong> 三块组成。</p><p>基于传统的 SSM 框架进行整合开发项目会比较繁琐，而且效率也比较低，所以在现在的企业项目开发当中，基本上都是直接基于 Spring Boot 整合 SSM 进行项目开发的。</p>',26)]))}const b=r(l,[["render",c],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/itheima-javaweb/day14-4-web-backend-development-summary/","title":"Day14-4 Web 后端开发总结","lang":"zh-CN","frontmatter":{"title":"Day14-4 Web 后端开发总结","createTime":"2025/03/01T12:58:00.000Z","updateTime":"2025/03/02T02:53:00.000Z","permalink":"/itheima-javaweb/day14-4-web-backend-development-summary/"},"headers":[],"readingTime":{"minutes":2.87,"words":862},"git":{"updatedTime":1740991950000,"contributors":[{"name":"dead_summer","username":"dead_summer","email":"2941325451@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/dead_summer?v=4","url":"https://github.com/dead_summer"}]},"filePathRelative":"notes/黑马程序员 JavaWeb/14. Day14 SpringBoot 原理篇/Day14-4 Web 后端开发总结.md"}');export{b as comp,h as data};
