import{_ as s,c as n,d as a,o}from"./app-B6dbd404.js";const p="/notion-blog/assets/a6f47d5fd35c1f91b9f5d5f75c440f3e-NIMig4XO.png",e="/notion-blog/assets/17ffcda8f8da7924b343ba1a317b37ae-BQ5-j3T5.png",r="/notion-blog/assets/b049990f1d9f21c9a6068a7eb56cfbd6-DHmzEhNa.png",i="/notion-blog/assets/ea398a2acdc4edb6d25c2fc5700143bd-DdJxfrdD.png",g="/notion-blog/assets/63bdf4229f150d547291f331daa2a141-DHYXMEe4.png",c="/notion-blog/assets/63bdf4229f150d547291f331daa2a141-DHYXMEe4.png",l="/notion-blog/assets/767531cb7e77d3a4b0e08cec49f98ce4-CLBFh8Qy.png",m="/notion-blog/assets/193227866ee26708bb774ff676ff3f82-BikZ_syi.png",d="/notion-blog/assets/54cfba1c83dcbb77f751d55cfc17ec78-CeXeI46x.png",b="/notion-blog/assets/77124372115730018b3e4896d27ae6fa-C2Zpb3Wj.png",f="/notion-blog/assets/7f9bc2bb523bd59d5f01f34f5732c52a-BIMShAvM.png",_="/notion-blog/assets/a11c6056b781148b40ac202a73b2b832-ByHvXkIJ.png",h="/notion-blog/assets/24e854ac2b2bd2150e97608a4990cc58-B9Pn1XVW.png",u={};function y(v,t){return o(),n("div",null,t[0]||(t[0]=[a('<h2 id="前后台分离开发介绍" tabindex="-1"><a class="header-anchor" href="#前后台分离开发介绍"><span><strong><strong>前后台分离开发介绍</strong></strong></span></a></h2><p>在传统的开发模式中，前后端混合开发存在诸多问题，例如：</p><ul><li><strong>沟通成本高</strong>：前后端修改互相依赖，沟通频繁。</li><li><strong>分工不明确</strong>：后端人员需要兼顾前后端代码，难以培养专业人才。</li><li><strong>不便管理和维护</strong>：代码耦合度高，更新和扩展困难。</li></ul><p>为了解决这些问题，现在主流的开发方式是前后端分离开发。如下图所示，展示了前后端分离的架构：</p><p><img src="'+p+'" alt="image.png"></p><p>前后端分离的核心思想是将前端和后端代码拆分成独立的工程，由专业的前端工程师和后端工程师分别负责。前端通过<strong>异步请求</strong>从后端获取数据。</p><p>那么，前后端如何协同工作呢？这就需要一份统一的<strong>接口文档</strong>。</p><p><strong>接口文档</strong>是前后端开发人员共同遵守的规范，定义了接口的地址、参数、请求方式、响应数据格式等信息。接口文档通常由后端开发人员根据产品经理提供的产品原型和需求文档编写。</p><p>基于前后端分离的模式，后端开发流程如下：</p><ol><li><strong>需求分析</strong>：阅读需求文档，理解需求。</li><li><strong>接口定义</strong>：根据需求，定义接口文档，包括接口地址、参数、响应数据类型等。</li><li><strong>前后端并行开发</strong>：前后端工程师按照接口文档，分别开发前后端代码。</li><li><strong>测试</strong>：前后端分别进行测试，确保符合接口文档的要求。</li><li><strong>前后端联调测试</strong>：前端请求后端接口，进行集成测试。</li></ol><h2 id="yapi" tabindex="-1"><a class="header-anchor" href="#yapi"><span><strong><strong>YAPI</strong></strong></span></a></h2><h3 id="yapi介绍" tabindex="-1"><a class="header-anchor" href="#yapi介绍"><span><strong><strong>YAPI介绍</strong></strong></span></a></h3><p><strong>YApi</strong> 是一款高效、易用、功能强大的 API 管理平台，旨在为开发、产品、测试人员提供更优雅的接口管理服务。</p><p>YApi 提供了以下主要功能：</p><ul><li><strong>API接口管理</strong>：根据需求撰写接口，包括接口的地址，参数，响应等等信息。</li><li><strong>Mock服务</strong>：模拟真实接口，生成接口的模拟测试数据，用于前端的测试。</li></ul><h3 id="接口文档管理" tabindex="-1"><a class="header-anchor" href="#接口文档管理"><span><strong><strong>接口文档管理</strong></strong></span></a></h3><p>下面演示 YApi 是如何管理接口文档的：</p><p>首先登录 YAPI 的<a href="https://yapi.pro/" target="_blank" rel="noopener noreferrer">官网</a>。</p><p><img src="'+e+'" alt="image.png"></p><p>登录后，在个人空间中，选择项目列表-&gt;添加测试项目。</p><p><img src="'+r+'" alt="image.png"></p><p>然后点击创建的项目，进入到项目中，紧接着先添加接口的分类。</p><p><img src="'+i+'" alt="image.png"></p><p>然后我们选择当前创建的分类，创建接口信息。</p><p><img src="'+g+'" alt="image.png"></p><p>紧接着，我们来到接口的编辑界面，对接口做生层次的定制，例如：接口的参数，接口的返回值等等。</p><p><img src="'+c+'" alt="image.png"></p><p>添加接口的请求参数。</p><p><img src="'+l+'" alt="image.png"></p><p>添加接口的返回值。</p><p><img src="'+m+'" alt="image.png"></p><p>然后保存上述设置，紧接着我们可以来到接口的预览界面，查询接口的信息。</p><p><img src="'+d+'" alt="image.png"></p><p>最后，我们还可以设置接口的 mock 信息。</p><p><img src="'+b+'" alt="image.png"></p><p>来到接口的 Mock 设置窗口。</p><p><img src="'+f+'" alt="image.png"></p><p>紧接着我们来到接口的预览界面，直接点击 Mock 地址。</p><p><img src="'+_+'" alt="image.png"></p><p>我们发现浏览器直接打开，并返回如下数据：</p><p><img src="'+h+'" alt="image.png"></p><p>如上步骤就是YAPI接口平台中对于接口的配置步骤。</p>',42)]))}const x=s(u,[["render",y],["__file","index.html.vue"]]),A=JSON.parse('{"path":"/itheima-javaweb/day03-2-front-and-backend-separation-development/","title":"Day03-2 前后台分离开发","lang":"zh-CN","frontmatter":{"title":"Day03-2 前后台分离开发","createTime":"2025/03/01T12:58:00.000Z","updateTime":"2025/03/02T02:42:00.000Z","permalink":"/itheima-javaweb/day03-2-front-and-backend-separation-development/"},"headers":[],"readingTime":{"minutes":2.89,"words":868},"git":{"updatedTime":1740991950000,"contributors":[{"name":"dead_summer","username":"dead_summer","email":"2941325451@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/dead_summer?v=4","url":"https://github.com/dead_summer"}]},"filePathRelative":"notes/黑马程序员 JavaWeb/3. Day03 Vue+Element/Day03-2 前后台分离开发.md"}');export{x as comp,A as data};
