import{_ as a,c as i,d as n,o as e}from"./app-B6dbd404.js";const p="/notion-blog/assets/4c70857cbc019101549390ee4880dbc9-DT0LEcHb.png",t="/notion-blog/assets/0fb750f751f5c09affc10c1f81aefac9-BPU28yu7.png",l={};function r(d,s){return e(),i("div",null,s[0]||(s[0]=[n('<p>在前面我们所讲解的 Mybatis 中，使用了数据库连接池技术，避免频繁的创建连接、销毁连接而带来的资源浪费。下面我们就具体的了解下数据库连接池。</p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span><strong><strong>介绍</strong></strong></span></a></h2><p><strong>没有使用数据库连接池</strong>：</p><p>客户端执行 SQL 语句：要先创建一个新的连接对象，然后执行 SQL 语句，SQL 语句执行后又需要关闭连接对象从而释放资源，每次执行 SQL 时都需要创建连接、销毁链接，这种频繁的重复创建销毁的过程是比较耗费计算机的性能。</p><p><img src="'+p+'" alt="image.png"></p><p><strong>数据库连接池</strong>：</p><p>数据库连接池是一个容器，它负责分配和管理数据库连接（Connection）。程序启动时，会在数据库连接池（容器）中创建一定数量的 <code>Connection</code> 对象。 这样做允许应用程序重复使用现有的数据库连接，而不是每次都重新建立连接。</p><p>当客户端需要执行 SQL 时，它首先从连接池中获取一个 <code>Connection</code> 对象，然后执行 SQL 语句。 SQL 语句执行完毕后，释放 <code>Connection</code> 对象时，该对象会被归还给连接池（<code>Connection</code> 对象可以被复用）。</p><p>如果客户端获取到 <code>Connection</code> 对象后，该对象一直处于空闲状态，即没有访问数据库， 并且数据库连接池检测到 <code>Connection</code> 对象的空闲时间超过了连接池中预设的最大空闲时间，此时数据库连接池会自动释放掉该连接对象，以优化资源利用。</p><p><img src="'+t+`" alt="image.png"></p><p><strong>数据库连接池的好处</strong>：</p><ol><li>资源重用</li><li>提升系统响应速度</li><li>避免数据库连接遗漏</li></ol><h2 id="产品" tabindex="-1"><a class="header-anchor" href="#产品"><span><strong><strong>产品</strong></strong></span></a></h2><p>要怎么样实现数据库连接池呢？</p><p>官方 (Sun Microsystems) 提供了数据库连接池标准（<code>javax.sql.DataSource</code> 接口）</p><ul><li><p>功能：获取连接。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Connection</span><span class="space"> </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getConnection</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">throws</span><span class="space"> </span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">SQLException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>第三方组织必须按照 DataSource 接口实现。</p></li></ul><p><strong>常见的数据库连接池</strong>：</p><ul><li>C3P0</li><li>DBCP</li><li>Druid</li><li>Hikari (SpringBoot 默认)</li></ul><p>现在使用更多的是：Hikari、Druid （性能更优越）</p><ul><li><strong>Hikari</strong>（追光者） [默认的连接池]</li><li><strong>Druid</strong>（德鲁伊）</li></ul><p>Druid 连接池是阿里巴巴开源的数据库连接池项目。功能强大，性能优秀，是 Java 语言最好的数据库连接池之一。</p><p>如果我们想把默认的数据库连接池切换为 Druid 数据库连接池，只需要完成以下两步操作即可：</p><ol><li><p>在 pom.xml 文件中引入依赖</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">&lt;!--</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">Druid</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">连接池依赖</span><span class="space"> </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">--&gt;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">com.alibaba</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">groupId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">druid-spring-boot-starter</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">artifactId</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1.2.8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">dependency</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在 application.properties 中引入数据库连接配置</p><p><strong>方式 1</strong>：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>spring.datasource.druid.driver-class-name=com.mysql.cj.jdbc.Driver</span></span>
<span class="line"><span>spring.datasource.druid.url=jdbc:mysql://localhost:3306/mybatis</span></span>
<span class="line"><span>spring.datasource.druid.username=root</span></span>
<span class="line"><span>spring.datasource.druid.password=1234</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式 2</strong>：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span></span>
<span class="line"><span>spring.datasource.url=jdbc:mysql://localhost:3306/mybatis</span></span>
<span class="line"><span>spring.datasource.username=root</span></span>
<span class="line"><span>spring.datasource.password=1234</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,23)]))}const o=a(l,[["render",r],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/itheima-javaweb/day08-6-database-connection-pool/","title":"Day08-6 数据库连接池","lang":"zh-CN","frontmatter":{"title":"Day08-6 数据库连接池","createTime":"2025/03/01T12:58:00.000Z","updateTime":"2025/03/02T02:44:00.000Z","permalink":"/itheima-javaweb/day08-6-database-connection-pool/"},"headers":[],"readingTime":{"minutes":2.45,"words":735},"git":{"updatedTime":1740991950000,"contributors":[{"name":"dead_summer","username":"dead_summer","email":"2941325451@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/dead_summer?v=4","url":"https://github.com/dead_summer"}]},"filePathRelative":"notes/黑马程序员 JavaWeb/8. Day08 MySQL-3 + Mybatis-1/Day08-6 数据库连接池.md"}');export{o as comp,h as data};
